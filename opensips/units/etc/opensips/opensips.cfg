####### Global Parameters #########

#debug_mode=yes

log_level=2
xlog_level=3
log_stderror=no
log_facility=LOG_LOCAL0
udp_workers=4
mhomed=1
disable_503_translation=yes
db_default_url="postgres://opensips:opensipsrw@localhost/opensips"

#disable_dns_blacklist=no
#dns_try_ipv6=yes

socket=udp:*:5060

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"
#### LOAD modules ####
loadmodule "acc.so"
loadmodule "auth.so"
loadmodule "db_mysql.so"
loadmodule "db_postgres.so"
loadmodule "dialog.so"
loadmodule "httpd.so"
loadmodule "json.so"
loadmodule "load_balancer.so"
loadmodule "maxfwd.so"
loadmodule "nathelper.so"
loadmodule "mi_http.so"
loadmodule "mi_fifo.so"
loadmodule "proto_udp.so"
loadmodule "proto_ws.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "signaling.so"
loadmodule "sipmsgops.so"
loadmodule "sl.so"
loadmodule "usrloc.so"
loadmodule "rtpproxy.so"
loadmodule "registrar.so"
loadmodule "userblacklist.so"

#### Transaction Module
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 60)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
modparam("rr", "append_fromtag", 0)

#### FIFO Management Interface
#modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
#modparam("mi_fifo", "fifo_mode", 0600)

#### USeR LOCation module
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
#modparam("registrar", "max_contacts", 10)

#### Nathelper protocol
modparam("registrar|nathelper", "received_avp", "$avp(rcv)")

#### MI HTTP
modparam("httpd", "port", 8989)

#### ACCounting module
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_level", 2)
modparam("acc", "db_table_acc", "acc")
modparam("acc", "db_table_missed_calls", "acc")
modparam("acc", "extra_fields", "db: src_ip; dst_ip; exten")

#### Dialog module
modparam("dialog", "table_name", "dialog")
modparam("dialog", "enable_stats", 1)
modparam("dialog", "profiles_with_value","caller")
modparam("dialog", "dlg_match_mode", 2)
modparam("dialog", "default_timeout", 1800)
modparam("dialog", "db_mode", 1)
modparam("dialog", "profiles_with_value", "g1")

#### Load Balancer
modparam("load_balancer", "db_table", "load_balancer")
modparam("load_balancer", "probing_reply_codes", "501,404,403")
modparam("load_balancer", "probing_verbose", 1)

#### USERBLACKLIST
modparam("userblacklist", "db_table", "userblacklist")

#### RTP PROXY
modparam("rtpproxy", "rtpproxy_sock", "udp:0.0.0.0:7890")
modparam("rtpproxy", "rtpproxy_autobridge", 1)

####### Routing Logic ########

route{

  if (!mf_process_maxfwd_header(10)) {
    send_reply(483,"Too Many Hops");
    exit;
  }

  if (has_totag()) {

    if ( is_method("ACK") && t_check_trans() ) {
      t_relay();
      exit;
    }

    if ( !loose_route() ) {
      send_reply(404,"Not here");
      exit;
    }

    if (is_method("BYE")) {
      do_accounting("db","failed");
      xlog("-------------------- CALL ENDED,$ru,$ci,$fn,$fu\n");
    }

    route(relay);
    exit;
  }

  if (is_method("CANCEL")) {
    if (t_check_trans())
      t_relay();
    exit;
  }

  t_check_trans();

  if ( !(is_method("REGISTER")  ) ) {
    
    if (is_myself("$fd")) {
          
    } else {
      
      if (!is_myself("$rd")) {
        send_reply(403,"Relay Forbidden");
        exit;
      }
    }

  }

  if (loose_route()) {
    xlog("L_ERR","-------------------- Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
    if (!is_method("ACK"))
      send_reply(403,"Preload Route denied");
    exit;
  }

  if (!is_method("REGISTER|MESSAGE"))
    record_route();

  if (is_method("INVITE")) {
    $acc_extra(src_ip) = $si;
    create_dialog("B");
    do_accounting("db|db", "cdr|missed");
    xlog("-------------------- CALL,$ru,$ci,$fn,$fu\n");
    route(limit);
  }
  
  if (!is_myself("$rd")) {
    append_hf("P-hint: outbound\r\n"); 
    route(relay);
  }
  
  if (is_method("PUBLISH|SUBSCRIBE")) {
    send_reply(503, "Service Unavailable");
    exit;
  }

  if (is_method("REGISTER")) {
    if (!save("location"))
      xlog("failed to register AoR $tu\n");

    exit;
  }

  if ($rU==NULL)  {
    if ($si == "127.0.0.1") {
      t_reply(200,"OK");
      exit;
    }
    else {
      send_reply(484,"Address Incomplete");
      exit;
    }
  }

  if (!lookup("location","m")) {
    t_reply(404, "Not Found");
    exit;
  }

  do_accounting("log","missed");
}

route[limit] {
  if ( $si == "127.0.0.1" ) {
    set_dlg_profile("g1",$si);
    get_profile_size("g1",$si,$var(calls));
    if ( $var(calls) > 100 ) {
      xlog("-------------------- g1 reached over limited calls.\n");
      send_reply(509,"Call over limited");
      exit;
    } 
    else {
      xlog("-------------------- g1 is performing $var(calls) calls\n");
      route(ob);
    }
  }
}

route[ob] {
  if ( $rU=~"((03)[2-9]|(09)[678]|(086)).{7}" ) {
    $avp(lb_res) = "vt";
  } else if ( $rU=~"((09)[03]|(089)|(07)[06-9]).{7}" ) {
    $avp(lb_res) = "mb";
  } else if ( $rU=~"((08)[1-58]|(09)[14]).{7}" ) {
    $avp(lb_res) = "vn";
  }

  else {
    send_reply(403,"Destination not found");
    exit;
  }
  
  $acc_extra(exten) = $rU;
  #$rU = $(rU{s.substr,2,0});
  
  if (!check_blacklist("userblacklist")) {
    xlog("-------------------- NOTICE: $rU is blacklisted\n");
    acc_db_request("Blacklisted", "acc");
    sl_send_reply(504, "Blacklisted");
    exit;
  }

  if ( !lb_start(1,$avp(lb_res),"s") ) {
    xlog("-------------------- REPORT: LB failed with code $T_reply_code .Service is full\n");
    acc_db_request("$avp(lb_res) Service full", "acc");
    send_reply(488,"Service full");
    exit;
  }

  xlog("-------------------- Selected destination is: <$dd> for <$ru>,<$ci>\n");
  $acc_extra(dst_ip) = $dd;
  t_on_failure("missed_call");
  route(relay);
}

route[relay] {
  if (is_method("INVITE")) {
    t_on_branch("per_branch_ops");
    t_on_reply("handle_nat");
    t_on_failure("missed_call");

    if(has_body("application/sdp")) {
      xlog("----- we have sdp on this $rm\n");
      rtpproxy_offer();
    }
  }
  
  if (is_method("BYE|CANCEL")) {
    rtpproxy_unforce();
  }

  if (!t_relay()) {
    send_reply(500,"Internal Error");
  };
  
  exit;
}

branch_route[per_branch_ops] {
  xlog("-------------------- new branch at $ru\n");
}

onreply_route[handle_nat] {
  if(is_method("ACK") && has_body("application/sdp")) {
    
    rtpproxy_answer();

  } else if(has_body("application/sdp")) {
    
    rtpproxy_offer(); 
  }

  if(nat_uac_test(127)) {
    
    xlog("we are on nat handle , user behind nat, fixing contact");
    fix_nated_contact();
  }

}

failure_route[missed_call] {
    if (t_was_cancelled()) {
    exit;
  }
}